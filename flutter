import 'package:flutter/material.dart';

void main() {
  runApp(PlantGuideApp());
}

class PlantGuideApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Plant Guide App',
      theme: ThemeData(
        primarySwatch: Colors.green,
      ),
      debugShowCheckedModeBanner: false,
      home: LoginPage(),
    );
  }
}

final Map<String, String> users = {};
final List<Plant> plants = []; // Shared plants list

const String adminUsername = 'admin';
const String adminPassword = 'admin123';

class LoginPage extends StatefulWidget {
  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final TextEditingController usernameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  String errorMessage = '';

  void _login() {
    final username = usernameController.text;
    final password = passwordController.text;

    if ((username == adminUsername && password == adminPassword) ||
        (users.containsKey(username) && users[username] == password)) {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => HomePage(isAdmin: username == adminUsername),
        ),
      );
    } else {
      setState(() {
        errorMessage = 'Invalid username or password.';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Background image
          Positioned.fill(
            child: Image.asset(
              'assets/images/login.webp', // Path to your background image
              fit: BoxFit.cover,
            ),
          ),
          // Login Form Container

          Center(
            child: Container(
              padding: const EdgeInsets.all(16.0),
              width: 300,
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.8),
                borderRadius: BorderRadius.circular(15),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black26,
                    blurRadius: 10.0,
                    spreadRadius: 2.0,
                  ),
                ],
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    'Welcome to Plant Guide App!',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.green[700],
                    ),
                    textAlign: TextAlign.center, // Center the text
                  ),
                  SizedBox(height: 20),
                  Text(
                    'Login',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.green[700],
                    ),
                  ),
                  SizedBox(height: 20),
                  TextField(
                    controller: usernameController,
                    decoration: InputDecoration(
                      labelText: 'Username',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                  ),
                  SizedBox(height: 15),
                  TextField(
                    controller: passwordController,
                    decoration: InputDecoration(
                      labelText: 'Password',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    obscureText: true,
                  ),
                  SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: _login,
                    style: ElevatedButton.styleFrom(
                      padding:
                          EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    child: Text('Login'),
                  ),
                  TextButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => RegisterPage()),
                      );

                      // Navigate to the Register Page
                    },
                    child: Text(
                      'Create an Account',
                      style: TextStyle(color: Colors.green[700]),
                    ),
                  ),
                  if (errorMessage.isNotEmpty)
                    Padding(
                      padding: const EdgeInsets.only(top: 15.0),
                      child: Text(
                        errorMessage,
                        style: TextStyle(color: Colors.red),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class RegisterPage extends StatefulWidget {
  @override
  _RegisterPageState createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final TextEditingController usernameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  String errorMessage = '';

  void _register() {
    final username = usernameController.text;
    final password = passwordController.text;

    if (username.isEmpty || password.isEmpty) {
      setState(() {
        errorMessage = 'Please fill in all fields.';
      });
    } else if (users.containsKey(username)) {
      setState(() {
        errorMessage = 'Username already exists.';
      });
    } else {
      users[username] = password;
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => LoginPage()),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Background image
          Positioned.fill(
            child: Image.asset(
              'assets/images/bac.jpg', // Path to your background image
              fit: BoxFit.cover,
            ),
          ),
          // Registration Form Container
          Center(
            child: Container(
              padding: const EdgeInsets.all(16.0),
              width: 300,
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.8),
                borderRadius: BorderRadius.circular(15),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black26,
                    blurRadius: 10.0,
                    spreadRadius: 2.0,
                  ),
                ],
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    'Register page',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.green[700],
                    ),
                    textAlign: TextAlign.center, // Center the text
                  ),
                  Text(
                    'Register',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.green[700],
                    ),
                  ),
                  SizedBox(height: 20),
                  TextField(
                    controller: usernameController,
                    decoration: InputDecoration(
                      labelText: 'Username',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                  ),
                  SizedBox(height: 15),
                  TextField(
                    controller: passwordController,
                    decoration: InputDecoration(
                      labelText: 'Password',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    obscureText: true,
                  ),
                  SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: _register,
                    style: ElevatedButton.styleFrom(
                      padding:
                          EdgeInsets.symmetric(horizontal: 30, vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    child: Text('Register'),
                  ),
                  if (errorMessage.isNotEmpty)
                    Padding(
                      padding: const EdgeInsets.only(top: 15.0),
                      child: Text(
                        errorMessage,
                        style: TextStyle(color: Colors.red),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class HomePage extends StatefulWidget {
  final bool isAdmin;

  HomePage({required this.isAdmin});

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  void _addPlant(Plant plant) {
    setState(() {
      plants.add(plant);
    });
  }

  void _editPlant(int index, Plant newPlant) {
    setState(() {
      plants[index] = newPlant;
    });
  }

  void _deletePlant(int index) {
    setState(() {
      plants.removeAt(index);
    });
  }

  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: TextButton(
          onPressed: () {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(builder: (context) => LoginPage()),
            ); // Go back to the previous screen
          },
          child: Text(
            'Back',
            style: TextStyle(
                color: const Color.fromARGB(
                    255, 157, 61, 61)), // Set text color to match app bar
          ),
        ),
        title: widget.isAdmin ? Text('Admin Dashboard') : Text('Plant Guide'),
        actions: [
          if (widget.isAdmin)
            TextButton(
              onPressed: () async {
                final result = await Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => AddEditPlantPage()),
                );
                if (result is Plant) _addPlant(result);
              },
              child: Text(
                'Add Plant',
                style: TextStyle(color: const Color.fromARGB(255, 192, 82, 82)),
              ),
            ),
          TextButton(
            onPressed: () {
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: Text('Logout'),
                  content: Text('Are you sure you want to log out?'),
                  actions: [
                    TextButton(
                      onPressed: () {
                        Navigator.of(context).pop(); // Close dialog
                      },
                      child: Text('Cancel'),
                    ),
                    TextButton(
                      onPressed: () {
                        Navigator.pushReplacement(
                          context,
                          MaterialPageRoute(builder: (context) => LoginPage()),
                        );
                      },
                      child: Text('Logout'),
                    ),
                  ],
                ),
              );
            },
            child: Text(
              'Logout',
              style: TextStyle(color: const Color.fromARGB(255, 215, 93, 93)),
            ),
          ),
        ],
      ),
      body: Stack(
        children: [
          // Background image
          Positioned.fill(
            child: Image.asset(
              'assets/images/bac.jpg', // Path to your background image
              fit: BoxFit.cover,
            ),
          ),
          ListView.builder(
            itemCount: plants.length,
            itemBuilder: (context, index) {
              final plant = plants[index];
              return Card(
                margin: EdgeInsets.all(8.0),
                child: ListTile(
                  title: Text(plant.name),
                  subtitle: Text(plant.careInstructions),
                  trailing: widget.isAdmin
                      ? Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            TextButton(
                              onPressed: () async {
                                final editedPlant = await Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) =>
                                        AddEditPlantPage(plant: plant),
                                  ),
                                );
                                if (editedPlant is Plant) {
                                  _editPlant(index, editedPlant);
                                }
                              },
                              child: Text('Edit'),
                            ),
                            TextButton(
                              onPressed: () {
                                _deletePlant(index);
                              },
                              child: Text('Delete'),
                            ),
                          ],
                        )
                      : null,
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => PlantDetailPage(plant: plant),
                      ),
                    );
                  },
                ),
              );
            },
          ),
        ],
      ),
    );
  }
}

class Plant {
  final String name;
  final String careInstructions;
  final String sunlight;
  final String wateringFrequency;
  final String soilType;
  final String imageUrl;

  Plant({
    required this.name,
    required this.careInstructions,
    required this.sunlight,
    required this.wateringFrequency,
    required this.soilType,
    required this.imageUrl,
  });
}

class AddEditPlantPage extends StatefulWidget {
  final Plant? plant;

  AddEditPlantPage({this.plant});

  @override
  _AddEditPlantPageState createState() => _AddEditPlantPageState();
}

class _AddEditPlantPageState extends State<AddEditPlantPage> {
  final TextEditingController nameController = TextEditingController();
  final TextEditingController careController = TextEditingController();
  final TextEditingController sunlightController = TextEditingController();
  final TextEditingController waterController = TextEditingController();
  final TextEditingController soilController = TextEditingController();
  final TextEditingController imageController = TextEditingController();

  @override
  void initState() {
    super.initState();
    if (widget.plant != null) {
      nameController.text = widget.plant!.name;
      careController.text = widget.plant!.careInstructions;
      sunlightController.text = widget.plant!.sunlight;
      waterController.text = widget.plant!.wateringFrequency;
      soilController.text = widget.plant!.soilType;
      imageController.text = widget.plant!.imageUrl; // Populate image URL
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Set the background color to green
      body: Container(
        color: Colors.green, // Full-screen background color
        child: Center(
          child: Container(
            padding: const EdgeInsets.all(16.0),
            width: 300, // Fixed width for the inner container
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black26,
                  blurRadius: 10.0,
                  spreadRadius: 2.0,
                ),
              ],
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  widget.plant == null ? 'Add Plant' : 'Edit Plant',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.green[700],
                  ),
                ),
                SizedBox(height: 20),
                TextField(
                  controller: nameController,
                  decoration: InputDecoration(labelText: 'Plant Name'),
                ),
                TextField(
                  controller: careController,
                  decoration: InputDecoration(labelText: 'Care Instructions'),
                ),
                TextField(
                  controller: sunlightController,
                  decoration:
                      InputDecoration(labelText: 'Sunlight Requirements'),
                ),
                TextField(
                  controller: waterController,
                  decoration: InputDecoration(labelText: 'Watering Frequency'),
                ),
                TextField(
                  controller: soilController,
                  decoration: InputDecoration(labelText: 'Soil Type'),
                ),
                TextField(
                  controller: imageController,
                  decoration: InputDecoration(labelText: 'Image URL'),
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: () {
                    final newPlant = Plant(
                      name: nameController.text,
                      careInstructions: careController.text,
                      sunlight: sunlightController.text,
                      wateringFrequency: waterController.text,
                      soilType: soilController.text,
                      imageUrl: imageController.text,
                    );
                    Navigator.pop(context, newPlant);
                  },
                  child:
                      Text(widget.plant == null ? 'Add Plant' : 'Save Changes'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class PlantDetailPage extends StatelessWidget {
  final Plant plant;

  PlantDetailPage({required this.plant});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: TextButton(
          onPressed: () {
            Navigator.pop(
                context); // Go back to the previous page (AddEditPlantPage)
          },
          child: Text(
            'Back',
            style: TextStyle(
                color: const Color.fromARGB(
                    255, 202, 85, 85)), // Set text color to match app bar
          ),
        ),
        title: Text(plant.name),
      ),
      body: Container(
        color: const Color.fromARGB(
            255, 209, 190, 197), // Set the background color to light pink
        child: Center(
          child: Container(
            padding: const EdgeInsets.all(16.0),
            decoration: BoxDecoration(
              color: const Color.fromARGB(255, 151, 227, 132),
              borderRadius: BorderRadius.circular(10),
              boxShadow: [
                BoxShadow(
                  color: Colors.grey.withOpacity(0.5),
                  spreadRadius: 5,
                  blurRadius: 7,
                  offset: Offset(0, 3), // Changes position of shadow
                ),
              ],
            ),
            width: MediaQuery.of(context).size.width * 0.9, // Container width
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Image.network(plant.imageUrl,
                    height: 200), // Display plant image with fixed height
                SizedBox(height: 20),
                Table(
                  border: TableBorder.all(color: Colors.green),
                  children: [
                    _buildTableRow('Name', plant.name),
                    _buildTableRow('Care Instructions', plant.careInstructions),
                    _buildTableRow('Sunlight', plant.sunlight),
                    _buildTableRow(
                        'Watering Frequency', plant.wateringFrequency),
                    _buildTableRow('Soil Type', plant.soilType),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  TableRow _buildTableRow(String title, String value) {
    return TableRow(
      children: [
        Container(
          padding: EdgeInsets.all(8.0),
          color: Colors.green[100],
          child: Text(
            title,
            style: TextStyle(fontWeight: FontWeight.bold),
          ),
        ),
        Container(
          padding: EdgeInsets.all(8.0),
          child: Text(value),
        ),
      ],
    );
  }
}
